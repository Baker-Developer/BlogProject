@model BlogProject.Models.Post
@using BlogProject.Enums
@{
    ViewData["Title"] = "Create";
}

<h1>Create</h1>

<h4>Post</h4>
<hr />
<div class="row">
    <div class="col-md-8">
        <form asp-action="Create" enctype="multipart/form-data">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="BlogId" class="control-label"></label>
                <select asp-for="BlogId" class="form-control" asp-items="ViewBag.BlogId"></select>
            </div>
            <div class="form-group">
                <label asp-for="Title" class="control-label"></label>
                <input asp-for="Title" class="form-control" />
                <span asp-validation-for="Title" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Abstract" class="control-label"></label>
                <textarea asp-for="Abstract" class="form-control"></textarea>
                <span asp-validation-for="Abstract" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Content" class="control-label"></label>
                <textarea asp-for="Content" id="content" class="form-control"> </textarea>
                <span asp-validation-for="Content" class="text-danger"></span>
            </div>

            <div class="form-group">
                <div class="row">
                    <div class="col">
                        <label class="control-label">Manage Tags</label>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <div class="row mb-2">
                            <div class="col">
                                <input type="text" class="form-control" id="TagEntry" />
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <button type="button" class="btn btn-primary" onclick="AddTag()" name="Add">Add</button>
                            </div>
                            <div class="col">
                                <button type="button" class="btn btn-primary " onclick="DeleteTag()" name="Delete">Delete</button>
                            </div>
                        </div>
                    </div>
                    <div class="col">
                        <select class="btn-block" id="TagList" name="TagValues" multiple></select>
                    </div>
                </div>
            </div>



            <div class="form-group">
                <label asp-for="ReadyStatus" class="control-label"></label>
                <select asp-for="ReadyStatus" asp-items="@Html.GetEnumSelectList<ReadyStatus>()" class="form-control"></select>
                <span asp-validation-for="ReadyStatus" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Image" class="control-label"></label>
                <input type="file" asp-for="Image" class="form-control" />
                <span asp-validation-for="Image" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {

    <script>

        let index = 0;

        function AddTag() {
            // Get A Reference To The TagEntry Input Element
            let tagEntry = document.getElementById("TagEntry")

            // Use The New Search Function To Dectect An Error State
            let searchResult = search(tagEntry.value);

            if (searchResult != null) {
                //Trigger My Sweet Alert For Whatever Condintion Is Contained In The searchResults var
                const Toast = Swal.mixin({
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: 7000,
                    timerProgressBar: true,
                    didOpen: (toast) => {
                        toast.addEventListener('mouseenter', Swal.stopTimer)
                        toast.addEventListener('mouseleave', Swal.resumeTimer)
                    }
                })

                Toast.fire({
                    icon: 'error',
                    title: 'Duplicate Tags Inputted',
                    text: searchResult,

                })


            } else {
                //Create A Select Option
                let newOption = new Option(tagEntry.value, tagEntry.value)
                document.getElementById("TagList").options[index++] = newOption;
            }


            //Clear Out The Tag Entry Control
            tagEntry.value = "";

            return true;

        }

        // The Seach Function Will Detect A Either An Empty Or Duplicate Tag
        // The Search Will Also Return A Error If An Error Is Dectected
        function search(str) {
            if (str == "") {
                return "Empty Tags Are Not Allowed";
            }

            let tagsElement = document.getElementById("TagList");
            if (tagsElement) {
                let options = tagsElement.options;
                for (let index = 0; index < options.length; index++) {
                    if (options[index].value == str) {
                        return `The Tag #${str} Tag Is Not Allowed (Duplicate Tag)`
                    }
                }
            }

        }


        function DeleteTag() {

            let tagCount = 1;
            let tagList = document.getElementById("TagList");
            if (!tagList) {
                return false;
            }

            if (tagList.selectedIndex == -1) {
                const Toast = Swal.mixin({
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true,
                    didOpen: (toast) => {
                        toast.addEventListener('mouseenter', Swal.stopTimer)
                        toast.addEventListener('mouseleave', Swal.resumeTimer)
                    }
                })

                Toast.fire({
                    icon: 'error',
                    title: 'Duplicate Tags Inputted',
                    html: "<span>Choose A Tag Before Deleting</span>",
                })
                return true;
            }


            while (tagCount > 0) {

                if (tagList.selectedIndex >= 0) {
                    tagList.options[tagList.selectedIndex] = null;
                    --tagCount;
                } else {
                    tagCount = 0;
                    index--;
                }
            }

        }


        $("form").on("submit", function () {
            $("#TagList option").prop("selected", "selected");
        })

        //Look for the tagValues variable to see if it has data
        if (tagValues != '') {
            let tagArray = tagValues.split(",");
            for (let loop = 0; loop < tagArray.length; loop++) {
                //Load up or replace the options we have
                ReplaceTag(tagArray[loop], loop);
                index++;
            }
        }

        function ReplaceTag(tag, index) {
            let newOption = new Option(tag, tag);
            document.getElementById("TagList").options[index] = newOption;
        }





        let tagValues = "@ViewData["TagValues"]";

        //Default font size but not for placeholder...
        $('#content').summernote({
            placeholder: "Post Body"
        });


    </script>

  @*  <script src="~/js/custom.js"></script>*@


    }

